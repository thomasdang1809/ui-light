@use "sass:map";
@use "sass:meta";
@use "sass:selector";
@use "sass:string";


@mixin generate-utility($property-name, $css-var-name, $map) {
  @each $bp-name, $bp-value in $breakpoints {
    @if $bp-name =='' {
      @each $key, $value in $map {
        .#{$property-name}-#{$key} {
          --#{$css-var-name}: #{$value};
        }
      }
    }

    @else {
      @media (min-width: #{$bp-value}) {
        @each $key, $value in $map {
          .#{$bp-name}\:#{$property-name}-#{$key} {
            --#{$css-var-name}: #{$value};
          }
        }
      }
    }
  }
}






$theme-colors: (
  "primary": #007bff,
  "secondary": #6c757d,
  "success": #28a745,
  "info": #17a2b8,
  "warning": #ffc107,
  "danger": #dc3545,
  "dark": #343a40,
  "light": #f8f9fa,
);
$theme-colors1: (
  "primary": #52b610,
  "secondary": #74788d,
  "info": #50a5f1,
  "warning": #ed6c02,
  "danger": #d32f2f
);

//-----------------------------------------
// _mixin.scss

// Mixin for responsive breakpoints
@mixin respond($breakpoint) {
  @media (min-width: map-get($breakpoints, $breakpoint)) {
    @content;
  }
}

// Mixin for creating utility classes based on a list of values
@mixin generate-utility-classes($values, $prefix) {
  @each $key, $value in $values {
    .#{$prefix}-#{$key} {
      --#{$prefix}: #{$value};
    }
  }
}

// Mixin for responsive utilities (margin, padding, etc.)
@mixin generate-responsive-utilities($breakpoints, $utilities) {
  @each $breakpoint, $bp-value in $breakpoints {
    @include respond($breakpoint) {
      @each $key, $value in $utilities {
        .#{$breakpoint}\:#{$key}-#{$value} {
          #{$key}: #{$value};
        }
      }
    }
  }
}

// Mixin for responsive borders, radius, shadows, etc.
@mixin generate-responsive-style($breakpoints, $properties, $prefix) {
  @each $breakpoint, $bp-value in $breakpoints {
    @include respond($breakpoint) {
      @each $key, $value in $properties {
        .#{$breakpoint}\:#{$prefix}-#{$key} {
          #{$prefix}: #{$value};
        }
      }
    }
  }
}
